#!/bin/bash

REMOTE_NAME="$1"

if [ -z "$REMOTE_NAME" ]; then
  echo "‚ö†Ô∏è  Aucun remote sp√©cifi√© ‚ûú utilisation de 'origin'"
  REMOTE_NAME="origin"
fi

REMOTE_URL=$(git remote get-url "$REMOTE_NAME" 2>/dev/null)

if [ -z "$REMOTE_URL" ]; then
  echo "‚ùå Remote '$REMOTE_NAME' introuvable."
  exit 1
fi

# D√©duction du type de remote
if echo "$REMOTE_URL" | grep -qi "gitlab"; then
  TARGET="$REMOTE_NAME" # ‚Üí "gitlab"
  echo "üéØ Remote GitLab ‚ûú configuration PROD"
elif echo "$REMOTE_URL" | grep -qi "github"; then
  TARGET="$REMOTE_NAME" # ‚Üí "github"
  echo "üíª Remote GitHub ‚ûú configuration DEV"
else
  TARGET="$REMOTE_NAME"
  echo "ü§∑ Remote inconnu ‚ûú configuration DEV par d√©faut"
fi

# Appliquer les fichiers de configuration
echo "üîÅ Application des configurations pour '$TARGET'..."
bash scripts/switch-ignore.sh "$TARGET"
bash scripts/switch-env.sh "$TARGET"
bash scripts/switch-docker-compose.sh "$TARGET"
bash scripts/switch-dockerfile.sh "$TARGET"

# Nettoyer le cache pour prise en compte du nouveau .gitignore
echo "üßπ Nettoyage du cache Git..."
git rm -r --cached . >/dev/null 2>&1

echo "‚úÖ Configuration '$TARGET' appliqu√©e avec succ√®s."
